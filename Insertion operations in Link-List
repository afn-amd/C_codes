
#include<stdio.h>
#include<conio.h>
#include<stdlib.h>

struct Node
{
	int data;
	struct Node *next;
};

struct Node *first=NULL;
struct Node *last=NULL;

void display()
{
	if(first==NULL)
	printf("\nList is Empty\n");
	else
	{
		struct Node *i;
		i=first;
		printf("\nIN LIST\n");
		while(i!=NULL)
		{
			if(i==last)
			printf(" | %d | %u | ",i->data,i->next);
			else
			printf(" | %d | %u | ->",i->data,i->next);
			i=i->next;
		}
	}
}

void insertAtFirst(int n)
{
	struct Node *newNode;
	newNode=(struct Node*)malloc(sizeof(struct Node));
	newNode->data=n;
	newNode->next=NULL;
	if(first==NULL)
	first=last=newNode;
	else
	{
		newNode->next=first;
		first=newNode;
	}
	display();
}

void insertAtLast(int n)
{
	struct Node *newNode;
	newNode=(struct Node*)malloc(sizeof(struct Node));
	newNode->data=n;
	newNode->next=NULL;
	if(first==NULL)
	first=last=newNode;
	else
	{
		last->next=newNode;
		last=newNode;
	}
	display();
}

void insertAtAfter(int n,int posdata)
{
	struct Node *i;
	struct Node *j;
	struct Node *newNode;
	newNode=(struct Node*)malloc(sizeof(struct Node));
	newNode->data=n;
	newNode->next=NULL;
	i=first;
	while(i!=NULL)
	{
		j=i->next;
		if(i->data==posdata)
		break;
		else
		i=i->next;
	}
	if(i!=NULL)
	{
		i->next=newNode;
		newNode->next=j;
		if(posdata==last->data)
		last=newNode;
		display();
	}
	else
	printf("\n%d is Not Present in the list\n",posdata);
}

void insertAtBefore(int n,int posdata)
{
	struct Node *i;
	struct Node *j;
	struct Node *newNode;
	newNode=(struct Node*)malloc(sizeof(struct Node));
	newNode->data=n;
	newNode->next=NULL;
	i=first;
	while(i!=NULL)
	{
		j->next=i;
		if(i->data==posdata)
		break;
		else
		i=i->next;
	}
	if(i!=NULL)
	{
		newNode->next=i;
		if(posdata==first->data)
		first=newNode;
		else
		j->next=newNode;
		display();
	}
	else
	printf("\n%d is Not Present in the list\n",posdata);
}

void deleteFirst()
{
	if(first==NULL)
	printf("\nList is Empty\n");
	else
	{
		struct Node *i;
		i=first;
		first=first->next;
		free(i);
		display();
	}
}

void deleteLast()
{
	struct Node *i,*j;
	if(first==last)
	{
		if(last==NULL)
		printf("\nList is Empty\n");
		else
		{
			i=first;
			first=last=NULL;
			free(i);
			display();
		}
	}
	else
	{
		j=first;
		i=last;
		while(j->next!=last)
		{
			j=j->next;
		}
		j->next=NULL;
		last=j;
		free(i);
		display();	
	}
}

int main()
{
	int n,posdata;
	char ch;
	printf("1 for Insert at First\n2 for Insert at Last\n3 for Insert at After\n4 for Insert at Before\n5 for Delete First\n6 for Delete Last\n7 for Exit\n");
	while(1)
	{
		printf("\nEnter_");
		ch=getche();
		if(ch=='1')
		{
			printf("\nEnter data :: ");
			scanf("%d",&n);
			insertAtFirst(n);
		}
		else if(ch=='2')
		{
			printf("\nEnter data :: ");
			scanf("%d",&n);
			insertAtLast(n);
		}
		else if(ch=='3')
		{
			printf("\nEnter data :: ");
			scanf("%d",&n);
			printf("Enter after which data you want to insert :: ");
			scanf("%d",&posdata);
			insertAtAfter(n,posdata);
		}
		else if(ch=='4')
		{
			printf("\nEnter data :: ");
			scanf("%d",&n);
			printf("Enter before which data you want to insert :: ");
			scanf("%d",&posdata);
			insertAtBefore(n,posdata);
		}
		else if(ch=='5')
		deleteFirst();
		else if(ch=='6')
		deleteLast();
		else if(ch=='7')
		{
			printf("\nTHANKS FOR USING!!!");
			break;
		}
		else
		printf("\nWRONG CHOICE!!!");
	}
	getch();
	return 0;
}
